# ðŸš€ Kubernetes Installation on Ubuntu Server 24.04 (Single-node Master)

## Prerequisites

* Ubuntu Server 25.04
* 2 vCPU, 16GB RAM
* 2 NICs (1 NAT, 1 Host-only >>>>> optional)

---

### 1. Pick Kubernetes Version

* Check latest release: [https://kubernetes.io/releases/](https://kubernetes.io/releases/)
* Power on VM and log in.

---

### 2. Disable Swap: 

```bash
sudo swapoff -a
sudo free -h
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
sudo rm /swap.img
```

> Swap must be off for kubelet to start. Ensures Kubernetes schedules pods with real RAM only.
> Kubernetes relies on precise memory management to schedule pods. It expects the system to have predictable resource availability
> If swap is enabled, Kubernetes cannot accurately determine if the system has **enough real RAM to run a pod.
> This leads to **overcommitment**, potentially causing performance issues or pod evictions.

---

### 3. Load Kernel Modules

```bash
sudo modprobe overlay
sudo modprobe br_netfilter
```

> overlay: Enables container image layers and overlay filesystems.
> br_netfilter: Allows iptables to see bridged traffic â€” essential for pod networking (CNI plugins like Calico).
---

### 4. Load Modules Permanently

```bash
tee /etc/modules-load.d/k8s.conf <<EOF
overlay
br_netfilter
EOF
```

---

### 5. Configure Kernel Parameters (Sysctl)

```bash
tee /etc/sysctl.d/kubernetes.conf <<EOT
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOT

sudo sysctl --system
```

> Ensures packet forwarding and iptables rules work for pod networking.

---

### 6. Install Dependencies for Containerd

```bash
sudo apt update
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates
```

---

### 7. Add Containerd Repository

```bash
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/containerd.gpg
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
```

---

### 8. Install Containerd

```bash
sudo apt update
sudo apt install -y containerd.io
```

---

### 9. Configure Containerd to Use systemd Cgroup

```bash
sudo containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd
```

> Ensures containerd uses same cgroup driver as Kubernetes.

---

### 10. Add Kubernetes Repository

```bash
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/k8s.gpg
echo 'deb [signed-by=/etc/apt/keyrings/k8s.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/k8s.list
sudo apt update
```

---

### 11. Install Kubernetes Components

```bash
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
```

> Installs `kubelet` (node agent), `kubeadm` (cluster bootstrap), `kubectl` (CLI).

---

### 12. Initialize Kubernetes Cluster

```bash
ip a | grep enp0s8  # pick host-only IP
sudo kubeadm init --apiserver-advertise-address=192.168.56.26 --pod-network-cidr=10.244.0.0/16
```

> Optional: Pull all images manually to save time
> --apiserver-advertise-address: The host-only NIC IP.
> --pod-network-cidr: Defines IP range for pods (used by Calico).

```bash
sudo kubeadm config images pull
```

> If errors occur:

```bash
sudo kubeadm reset
```

---

### 13. Setup kubectl Access

```bash
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
```

---

### 14. Install Calico Network Plugin

```bash
curl -O https://raw.githubusercontent.com/projectcalico/calico/v3.30.0/manifests/calico.yaml
kubectl apply -f calico.yaml
kubectl set env daemonset/calico-node -n kube-system IP_AUTODETECTION_METHOD=interface=enp0s8
```
> Ensures Calico uses your host-only interface (enp0s8) for pod networking.

---

### 15. Verify Cluster Status

```bash
kubectl get pods -n kube-system
kubectl get pods -A
kubectl get nodes -o wide
```

> If node shows `NotReady`: Just restart services:

```bash
sudo systemctl restart containerd
sudo systemctl restart kubelet
kubectl get nodes -o wide
```

---

### 16. Deploy Test Application

```bash
kubectl create ns demo-app
kubectl create deployment nginx-app --image=nginx --replicas=2 -n demo-app
kubectl get deployment -n demo-app
kubectl get pods -n demo-app
```

---

### 17. Expose Deployment Using NodePort

```bash
kubectl expose deployment nginx-app -n demo-app --type NodePort --port 80
kubectl get svc -n demo-app
```

> Access app: `curl 192.168.56.26:<NodePort>`

---

### 18. Optional: Allow Pods on Master Node

```bash
kubectl taint nodes $(hostname) node-role.kubernetes.io/control-plane:NoSchedule-
```

---

### 19. Fix Node IP (if kubelet uses wrong IP)

```bash
cat <<EOT | sudo tee /var/lib/kubelet/kubeadm-flags.env
KUBELET_KUBEADM_ARGS="--container-runtime-endpoint=unix:///var/run/containerd/containerd.sock --pod-infra-container-image=registry.k8s.io/pause:3.10 --node-ip=192.168.56.26"
EOT

echo "127.0.1.1 lnx25-docker" | sudo tee -a /etc/hosts
echo "192.168.56.26 lnx25-docker" | sudo tee -a /etc/hosts

sudo systemctl restart kubelet
kubectl get nodes -o wide
```

---

### âœ… Final Verification

```bash
kubectl get nodes -o wide
kubectl get pods -A
```

ðŸŽ‰ Cluster ready!


